---
title: "Exploring reprex: A Reproducible Example Engine for R"
authors:
- Mubarak Mojoyinola
- Ethan Murra
- Max Miller
- Yash Vora
format: 
  revealjs:
    multiplex: false
    footer: "STAT 5400: Computing in Statistics"
    theme: ["pp.scss"]
    slide-number: c/t
    incremental: TRUE
    logo: iowa.png
    css: logo.css
editor: source
---

------------------------------------------------------------------------

## Introduction to Reproducibility

-   Reproducibility is the documenting of all methodology in a manner that the respective work can be executed with the same results

-   Applies to all domains of scientific research

-   Computational Reproducibility of work is crucial for collaboration and learning

-   Replicability/Repeatability vs. Reproducibility 

-   Reproducible example vs. Reproducibility

![](reproducibility-triangle.png){width="100%" fig-align="right"}

<!-- replicable means the same conclusions or outcomes can be found using slightly different data or processes. Maybe mention the "Replication Crisis" -->
<!-- reproduce is when the exact same methods are used yielding the same results. this would be the case of what reprex is aiming to do -->

------------------------------------------------------------------------

## Motivation for Reproducible Examples { .incremental }

The sharing and communicating of code is complex in modern day

-   different locations
-   innovation
-   office vs. remote vs. home work

Reproducible examples are essential for...

-   error/begugging code
-   educational and industry settings
-   code development
-   webinars

A solution to these problems??

-   the reprex package in R

------------------------------------------------------------------------

## What is reprex?

-   {repr}oducible {ex}ample
-   Made by Jennifer Bryan et al. in 2018
-   Prepare Reproducible Example Code via the Clipboard

![](reprex-logo.png){width="80%" fig-align="center"}

------------------------------------------------------------------------

## Installation and Setup

<!-- <<<<<<< HEAD -->
<!-- -   Instructions for installing reprex -->
<!-- -   Brief demonstration of package setup and configuration -->

- To get started with `reprex`, you'll need to install the package. Open your R console and run:

:::fragment
```{r, echo=TRUE}
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Install the reprex package from CRAN
install.packages("reprex")
```
:::

- It also comes as a part of the package called tidyverse.

- Once installed, you can load the package using:

:::fragment
```{r, echo=TRUE}
# Load the reprex package
library(reprex)
```
:::

------------------------------------------------------------------------

## reprex Workflow

<!-- <<<<<<< HEAD -->
<!-- -   Overview of the typical workflow when using reprex -->
<!-- -   Steps involved in creating a reproducible example -->

The `reprex` package is designed to streamline the process of creating reproducible examples in R. It follows a simple workflow:

1. **Identify the Problem**: Start with a specific R-related problem or question that you want to address.

2. **Isolate the Code**: Isolate the relevant code in your script or R Markdown document.

3. **Run reprex() Function**: Use the `reprex()` function to generate a reproducible example.

4. **Review and Share**: The output will be formatted as a self-contained, runnable piece of R code. Share it with others to get help or discuss the problem.


------------------------------------------------------------------------

## Creating a Basic Reprex

<!-- <<<<<<< HEAD -->
<!-- -   Demonstrate how to create a simple reprex using a basic R script -->
<!-- -   Emphasize the key components, including code, input, and output -->

Let's walk through the process of creating a basic reprex:

1. **Identify the Problem:** Suppose you want to calculate the mean of a vector `x`. 

2. **Isolate the Code:** 

::: fragment
```{r, echo=TRUE}
x <- c(1, 2, 3, NA, 5)
mean(x, na.rm = TRUE)
``` 
:::

3. **Run reprex() Function**:

::: fragment
```{r, echo=TRUE}
reprex({
  x <- c(1, 2, 3, NA, 5)
  mean(x, na.rm = TRUE)
})
```
:::
- You can also just copy the code required and run reprex() function.

4. **Review and Share:**
The output will be a formatted reprex that you can share with others for discussion or troubleshooting.
Remember, a good reprex includes not only the minimal code and dataset that produces the error, but also includes the necessary libraries and everything else needed to reproduce the error and your computing environment.


------------------------------------------------------------------------

## Advanced reprex Features #1
<!-- <<<<<<< HEAD -->
<!-- -   Explore advanced options, such as rendering to R Markdown or saving as a standalone file -->
<!-- -   Discuss how these features enhance the reproducibility process -->

- **venue:** This determines the output format and style of the reprex. You can choose from ‚Äúgh‚Äù (GitHub-Flavored Markdown), ‚Äúr‚Äù (R script with commented output), ‚Äúrtf‚Äù (Rich Text Format), ‚Äúhtml‚Äù (HTML fragment), ‚Äúslack‚Äù (Slack message), ‚Äúso‚Äù (Stack Overflow Markdown), or ‚Äúds‚Äù (Discourse Markdown). The default is ‚Äúgh‚Äù.

- **render:** This controls whether to actually run the code and produce output. If FALSE, only syntax highlighting is applied. The default is TRUE.

- **advertise:** This decides whether to include a footer that describes when and how the reprex was created. The default is TRUE for venues ‚Äúgh‚Äù, ‚Äúhtml‚Äù, ‚Äúso‚Äù, and ‚Äúds‚Äù, and FALSE for ‚Äúr‚Äù, ‚Äúrtf‚Äù, and ‚Äúslack‚Äù.
session_info: This indicates whether to include session information at the end of the reprex, using sessioninfo::session_info() or sessionInfo(). The default is FALSE.

---

## Advanced reprex Features #2

- **style:** This specifies whether to re-style the code with the styler package. The default is FALSE.
comment: This sets the prefix for commenting out the output. The default is ‚Äú#>‚Äù.

- **tidyverse_quiet:** This determines whether to suppress startup messages from tidyverse packages. The default is TRUE.

- **std_out_err:** This decides whether to capture and display standard output and standard error. The default is FALSE.

- **html_preview:** This controls whether to show an HTML preview of the reprex in the RStudio viewer or the default browser. The default is TRUE.


------------------------------------------------------------------------

## Example

::: fragment
```{r, echo=TRUE}
library(ggplot2)
#Library()
#Library()
#Library()
data <- read.csv("example_data.csv")

names(data)

```
:::

------------------------------------------------------------------------

## Tip: Setup

-   Do once per R session

:::fragment
```{r, echo=TRUE, eval=FALSE}
library(reprex)
```
:::

-   Or... do once per machine

:::fragment
```{r, echo=TRUE, eval=FALSE}
## Put this in your ~/.Rprofile to make reprex available 24/7
if (interactive()) {
  suppressMessages(require(reprex))
}

## Do NOT do this with non-workflow packages such as dplyr, ggplot2, etc!

## One way to create or open your ~/.Rprofile
## install.packages("usethis")
usethis::edit_r_profile()
```
:::

------------------------------------------------------------------------

## Tip: Restyling Code

```{r, echo=TRUE, eval = FALSE}
reprex(
  input = c(
    'if (True) "true branch" else {',
    '"else branch"',
    '             }'
  ),
  style = FALSE
)
```

<br>

```{r, echo=TRUE, eval = FALSE}
reprex(
  input = c(
    'if (True) "true branch" else {',
    '"else branch"',
    '             }'
  ),
  style = TRUE
)
```

------------------------------------------------------------------------

## reprex in Data Science Workflows

Reprex fits into the data science workflow as a tool to create reproducible proof of concepts or ideas.

Arguing for the use of `parse_number` instead of `as.numeric`

<br>

::: fragment
```{r, eval=FALSE, echo=TRUE}
dplyr::tibble(
text = c("2", "4.3", "#1.23", "1,234"),
`as.numeric(text)` = as.numeric(text),
`parse_number(text)` = readr::parse_number(text)
)
#> Warning in eval_tidy(xs[[j]], mask): NAs introduced by coercion
#> # A tibble: 4 √ó 3
#>   text  `as.numeric(text)` `parse_number(text)`
#>   <chr>              <dbl>                <dbl>
#> 1 2                    2                   2   
#> 2 4.3                  4.3                 4.3 
#> 3 #1.23               NA                   1.23
#> 4 1,234               NA                1234
```
:::

------------------------------------------------------------------------

## Best Practices and Tips

1.  Only include necessary code

<br>

2.  Provide required package

<br>

3.  Provide required dataset

<br>

4.  Provide session info!

## Providing necessary code

**Leave other people's computer alone**

::: r-stack
::: fragment
```{r, eval=FALSE, echo=TRUE}

rm(list = ls())

setwd("C:/Users/mubarak/mysecret/path/Instructional Project")
```

-   If you are always using `setwd()`,it is beneficial to transition towards [R-project workflow](https://r4ds.hadley.nz/workflow-scripts.html).
:::

![](pcfire.png){.fragment}
:::

**unsure about which code to include?**

1.  Forward coding: Include one line of code until it breaks.\

2.  Backward coding: Remove one line of code until it works, then add the line producing the error.

## Providing required library

**Use library() instead of require()**

-   `Library` throws an error when the user does not have the library installed and they know what to do.

<br>

-   `Require` provides a warning and code continues to run until you encounter an error.

<br>

-   **Solving the problem of missing package**

-   `if (!require(ggplot2)) install.packages("ggplot2") library(ggplot2)`üëé

-   **Avoid functions that change someone's computer**

## Providing required dataset

**Avoid csv file** `data <- read.csv(projectdata.csv)`

-   ![](no_csv.png)

## Providing required dataset

**Use built-in data in R**

1.  `mtcars`
2.  `iris`
3.  `airquality`
4.  `quakes`

<br>

-   These represent only a few of the numerous built-in datasets available in R. You can access a comprehensive list of the built-in datasets with the `data()` function.

-   Modify the dataset to suite your specific need.

## Providing required dataset

**Create fake data**

**Using tibble**

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
library(dplyr)

tibble(x = c(1, 2), y = c(2, 4))
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
tribble(
  ~x, ~y,
  1, 2, 
  2, 4
)
```
:::
:::

<br>

**Using data.frame**

::: columns
::: {.column width="50%"}
```{r, eval=FALSE, echo=TRUE}
mydata = data.frame(x = c(1,2),
                    y = c(2, 4))
mydata
```
:::
:::

## Providing required dataset

**Sample of your data**

Sometimes you want to provide your exact data.

-   Share a subset of your dataset without a need for a csv file using `dput()` or `dpasta()` from `datapasta` package.

::: fragment
::: columns
::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
dput(iris[1:10,1:4])
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
datapasta::dpasta(iris[1:10,1:4])
```
:::
:::
:::

<br>

::: fragment
::: columns
::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 
5, 4.4, 4.9), Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 
3.4, 2.9, 3.1), Petal.Length = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 
1.4, 1.5, 1.4, 1.5), Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 
0.4, 0.3, 0.2, 0.2, 0.1)), row.names = c(NA, 10L), class = "data.frame")
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
data.frame(
  Sepal.Length = c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9),
   Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1),
  Petal.Length = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5),
   Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1)
)
```
:::
:::
:::

## Provide session info!

Session info contains many technical details about your current R session, including the operating system, the R version being used, and the versions of all packages installed.

<br> While sometimes helpful for technical troubleshooting, in many situations the extensive details beyond the core R version provide little added insight but require filtering out the clutter.

<br> Setting the `session_info` argument to true in `reprex()` include your current r session info in the reprex output. When venue is "gh", the session info is wrapped in a collapsible detail tag.

## Resources

-   [How to use reprex](https://reprex.tidyverse.org/articles/learn-reprex.html)

<br>

-   [Make a reprex .... please](https://make-a-reprex-please.netlify.app/#1)

<br>

-   [How to reprex](https://aosmith16.github.io/spring-r-topics/slides/week09_reprex.html#1)
